{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1pz6bAg_NuLIIXE5OGEqNTVmd4hzLqK2Y","timestamp":1745054599708},{"file_id":"1xiREV_BZK775ZH2QC2JjIvYFnauh15n3","timestamp":1744967578272}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Работа с API и JSON в Python: практическое руководство\n","\n","Работа с API и JSON — важный навык аналитиков данных, который позволяет получать и обрабатывать актуальную информацию из внешних источников. В этой статье мы рассмотрим основные принципы работы с API и приведём практический пример для лучшего понимания темы.\n","\n","\n","## Теория: запросы к API и обработка JSON\n","\n","- **API (Application Programming Interface)** — это интерфейс, который позволяет программам взаимодействовать друг с другом. Часто API предоставляет данные в формате JSON.\n","- Для работы с API в Python обычно используют библиотеку `requests`, которая позволяет отправлять HTTP-запросы (GET, POST и др.).\n","- Ответ от API часто приходит в формате JSON — это текстовый формат, который легко преобразуется в структуры Python (словарь, список) с помощью встроенной библиотеки `json`.\n","- Основные шаги:\n","  1. Отправить запрос к API с помощью `requests.get()` или `requests.post()`.\n","  2. Получить ответ и проверить статус (например, код 200 означает успешный запрос).\n","  3. Преобразовать JSON-ответ в объект Python через `response.json()` или `json.loads()`.\n","  4. Извлечь нужные данные из полученного словаря или списка для анализа.\n","\n","## Практика: пример получения и анализа данных из открытого API\n","\n","Возьмём публичный API JSON Placeholder, который возвращает фиктивные данные. Получим задачу (todo) по ID и проанализируем её."],"metadata":{"id":"Cf-8XB_iwq4i"}},{"cell_type":"code","source":["import requests\n","\n","# URL API для получения задачи с id=1\n","url = \"https://jsonplaceholder.typicode.com/todos/1\"\n","\n","# Отправляем GET-запрос\n","response = requests.get(url)\n","\n","# Проверяем статус ответа\n","if response.status_code == 200:\n","    # Преобразуем JSON в словарь Python\n","    data = response.json()\n","\n","    # Выводим полученные данные\n","    print(\"Полученные данные:\", data)\n","\n","    # Анализ: проверим, выполнена ли задача\n","    if data['completed']:\n","        print(f\"Задача '{data['title']}' выполнена.\")\n","    else:\n","        print(f\"Задача '{data['title']}' ещё не выполнена.\")\n","else:\n","    print(\"Ошибка при запросе к API:\", response.status_code)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9KL-1HUD1oKL","executionInfo":{"status":"ok","timestamp":1744827850414,"user_tz":-180,"elapsed":519,"user":{"displayName":"Людмила Рябова","userId":"06197799191221578483"}},"outputId":"2db79189-791a-46b5-9322-564ebd019d44"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Полученные данные: {'userId': 1, 'id': 1, 'title': 'delectus aut autem', 'completed': False}\n","Задача 'delectus aut autem' ещё не выполнена.\n"]}]},{"cell_type":"markdown","source":["\n","### Что здесь происходит:\n","- Мы делаем GET-запрос к API.\n","- Получаем JSON-ответ и сразу преобразуем его в словарь Python.\n","- Извлекаем нужные поля (`title`, `completed`) и выводим информацию.\n","- По полю `completed` делаем простой анализ — выполнена задача или нет.\n","\n","## Расширение: работа с вложенными JSON и сохранение данных\n","\n","Если API возвращает сложные вложенные структуры, с ними тоже можно работать, обращаясь к вложенным ключам словарей и элементам списков.\n","\n","Для сохранения данных в файл JSON можно использовать:\n","\n","```python\n","import json\n","\n","with open('data.json', 'w') as f:\n","    json.dump(data, f, ensure_ascii=False, indent=4)\n","```\n","\n","---\n","\n","## Работа с JSON: создание, сохранение и чтение данных\n","\n","Теперь давайте более подробно рассмотрим работу с JSON-форматом, разберем такую задачу:\n","\n","**Задача:** создать структуру данных в формате Python, преобразовать её в JSON-формат и сохранить в файл. Затем загрузить данные из файла обратно в Python-объект и получить доступ к отдельным элементам для дальнейшего анализа.\n","\n","Такой процесс часто используется для хранения и обмена данными в аналитике."],"metadata":{"id":"VIT3oKFz1nJG"}},{"cell_type":"code","source":["import json\n","\n","user_data = {\n","    \"name\": \"Alice\",\n","    \"age\": 30,\n","    \"city\": \"New York\",\n","    \"skills\": [\"Python\", \"Data Analysis\", \"Machine Learning\"]\n","}\n","\n","# Преобразование словаря в JSON-строку\n","json_str = json.dumps(user_data, indent=4)\n","print(\"JSON-строка:\")\n","print(json_str)\n","\n","# Запись JSON-строки в файл\n","with open('user_data.json', 'w') as file:\n","    json.dump(user_data, file, indent=4)\n","\n","# Чтение JSON из файла и преобразование обратно в объект Python\n","with open('user_data.json', 'r') as file:\n","    data = json.load(file)\n","\n","print(\"\\nДанные, загруженные из JSON-файла:\")\n","print(data)\n","\n","# Доступ к отдельным элементам\n","print(\"\\nИмя пользователя:\", data['name'])\n","print(\"Навыки пользователя:\", \", \".join(data['skills']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oFJcGQVK2-uI","executionInfo":{"status":"ok","timestamp":1744828250518,"user_tz":-180,"elapsed":69,"user":{"displayName":"Людмила Рябова","userId":"06197799191221578483"}},"outputId":"24ec82f7-1de1-427b-b04e-3f80165c2dd6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["JSON-строка:\n","{\n","    \"name\": \"Alice\",\n","    \"age\": 30,\n","    \"city\": \"New York\",\n","    \"skills\": [\n","        \"Python\",\n","        \"Data Analysis\",\n","        \"Machine Learning\"\n","    ]\n","}\n","\n","Данные, загруженные из JSON-файла:\n","{'name': 'Alice', 'age': 30, 'city': 'New York', 'skills': ['Python', 'Data Analysis', 'Machine Learning']}\n","\n","Имя пользователя: Alice\n","Навыки пользователя: Python, Data Analysis, Machine Learning\n"]}]},{"cell_type":"markdown","source":["\n","В этом примере показано, как создавать JSON-данные из словаря Python, сохранять их в файл и затем читать обратно для дальнейшей работы. Это фундаментальные операции при работе с JSON, которые часто используются аналитиками для хранения и обмена данными.\n","\n","---\n","\n","## Пример: Получение температуры в нескольких городах и поиск самого тёплого\n","\n","Необходимо написать программу, которая:\n","\n","- Получит текущую температуру в нескольких городах через OpenWeatherMap API.\n","- Определит и выведет город с самой высокой температурой.\n","\n","---"],"metadata":{"id":"IlWnAruP3Bni"}},{"cell_type":"code","source":["import requests\n","\n","API_KEY = \"ваш_api_ключ\"  # Зарегистрируйтесь на https://openweathermap.org/ и получите ключ\n","CITIES = [\"Moscow\", \"Saint Petersburg\", \"Novosibirsk\", \"Yekaterinburg\", \"Kazan\"]\n","\n","def get_temperature(city):\n","    url = \"https://api.openweathermap.org/data/2.5/weather\"\n","    params = {\"q\": city, \"appid\": API_KEY, \"units\": \"metric\"}\n","    response = requests.get(url, params=params)\n","    if response.status_code == 200:\n","        data = response.json()\n","        return data[\"main\"][\"temp\"]\n","    else:\n","        print(f\"Ошибка для города {city}: {response.status_code}\")\n","        return None\n","\n","def main():\n","    temps = {}\n","    for city in CITIES:\n","        temp = get_temperature(city)\n","        if temp is not None:\n","            temps[city] = temp\n","\n","    if temps:\n","        warmest_city = max(temps, key=temps.get)\n","        print(\"Температуры в городах:\")\n","        for city, temp in temps.items():\n","            print(f\"{city}: {temp}°C\")\n","        print(f\"\\nСамый тёплый город: {warmest_city} ({temps[warmest_city]}°C)\")\n","    else:\n","        print(\"Данные не получены.\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"CiNhSfKY0SEG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744894694640,"user_tz":-180,"elapsed":509,"user":{"displayName":"Людмила Рябова","userId":"06197799191221578483"}},"outputId":"93432c94-82d9-46a3-f7b0-5b48eb96d6dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Температуры в городах:\n","Moscow: 18.24°C\n","Saint Petersburg: 12.82°C\n","Novosibirsk: 5.61°C\n","Yekaterinburg: 3.77°C\n","Kazan: 20.34°C\n","\n","Самый тёплый город: Kazan (20.34°C)\n"]}]},{"cell_type":"markdown","source":["---\n","\n","### Разбор решения\n","\n","- Функция `get_temperature` отправляет запрос к API и возвращает температуру в градусах Цельсия для указанного города.\n","- В `main` мы собираем температуры для всех городов в словарь `temps`.\n","- Затем находим город с максимальной температурой с помощью функции `max`.\n","- Выводим температуры и самый тёплый город.\n","\n","---\n","\n","## Заключение\n","\n","Работа с API и JSON в Python — это фундаментальный навык, который включает в себя несколько этапов:\n","\n","- **Отправка запросов через библиотеку requests** — позволяет взаимодействовать с внешними веб-сервисами, получать необходимые данные и управлять процессом обмена информацией.\n","- **Получение и преобразование JSON-ответов** — JSON является одним из самых популярных форматов передачи данных, и умение корректно распарсить и преобразовать эти данные в удобные для обработки структуры Python (например, словари и списки) крайне важно.\n","- **Извлечение и анализ данных** — после получения данных необходимо уметь эффективно извлекать нужную информацию, фильтровать, преобразовывать и анализировать её для дальнейшего использования.\n","- **Автоматизация сбора и обработки данных из внешних источников** — с помощью API и JSON можно создавать скрипты и приложения, которые автоматически собирают актуальные данные из интернета, корпоративных систем, социальных сетей и других сервисов, значительно экономя время и повышая точность анализа.\n","\n","Освоение работы с API и JSON расширяет профессиональные возможности аналитика, позволяя ему работать с живыми, постоянно обновляющимися данными, интегрировать различные источники информации и создавать более глубокие, обоснованные и своевременные аналитические отчёты. Этот навык открывает двери к современным методам обработки данных и является важным шагом на пути к более продвинутому уровню аналитики и разработки."],"metadata":{"id":"5-BaAmlrx6u6"}}]}